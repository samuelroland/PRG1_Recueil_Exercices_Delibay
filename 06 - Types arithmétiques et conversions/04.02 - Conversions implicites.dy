Skill: Types arithmétiques et conversions
Exo: [open] Conversions implicites 

Soient les déclarations et modificiations du flux ci-dessous 

~~~cpp 
signed char sc = -1;
signed int s = -1;

unsigned char uc = 1;
unsigned int u = 1;
double d = 1;

cout << setprecision(10) << boolalpha;
~~~

Notes
- `pow(2,8)`  vaut `256`
- `pow(2,16)` vaut `65536`
- `pow(2,32)` vaut `4294967296`

TODO: est-ce que la justification doit aller dans un open exo ?

Qu'affichent les lignes suivantes ? Justifiez votre réponse
- en ré-écrivant l'expression en rendant explicites toutes les conversions implicites
- en ajoutant toutes les parenthèses qui traduisent l'ordre implicite des opérateurs

---
Subexo:
~~~cpp
cout << s * d + u;
~~~
Solution: 0
Explanation: équivalent à `((double(-1) * 1.) + double(1u))`

Subexo: 
~~~cpp
cout << s * u + d;
~~~
Solution: 4294967296
Explanation: équivalent à `(double(unsigned(-1) * 1u) + 1.)`

Subexo: 
~~~cpp
cout << d * u + s;
~~~
Solution: 0
Explanation: équivalent à `((1. * double(1u)) + double(-1))`

Subexo: 
~~~cpp
cout << sc * uc + d;
~~~
Solution: 0
Explanation: équivalent à `(double(int(-1) * int(1)) + 1.)`

Subexo: 
~~~cpp
cout << sc * uc + s;
~~~
Solution: -2
Explanation: équivalent à `(((int(-1) * int(1u)) + -1)`

Subexo: 
~~~cpp
cout << sc * uc - u;
~~~
Solution: 4294967294
Explanation: équivalent à `(unsigned(int(-1) * int(1u)) - 1u)`

TODO. sur les 5 true/false, est-ce que ce n'est pas 0/1 plutôt ? comment avoir ça au mieux ?
Subexo: 
~~~cpp
cout << (s < u);
~~~
Solution: false
Explanation: équivalent à `(unsigned(-1) < 1u)` avec `unsigned(-1)` qui vaut `4294967295`

Subexo: 
~~~cpp
cout << (s < d);
~~~
Solution: true
Explanation: équivalent à `(double(-1) < 1.)`

Subexo: 
~~~cpp
cout << (-u < d);
~~~
Solution: false
Explanation: équivalent à `(double(-1u) < -1)` avec `-1u` qui vaut `4294967295`

Subexo: 
~~~cpp
cout << (-uc < d);
~~~
Solution: true
Explanation: équivalent à `(double(-int(1)) < 1.)`

Subexo: 
~~~cpp
cout << (-d < u);
~~~
Solution: true
Explanation: équivalent à `(-1. < double(1u))`
