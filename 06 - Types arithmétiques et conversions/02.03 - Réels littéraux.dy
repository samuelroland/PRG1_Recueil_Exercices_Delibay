Skill: Types arithmétiques et conversions
Exo: Littéraux constants
TODO: transformer pour simplification des réponses et aucorrections ?

Pour chacune des lignes de code suivante, indiquez 
- si elle compile
- si oui
  - quel est le type de la variable
  - ce que la ligne affiche; 

**NB** 
Pour simplifier les réponses, au lieu de: "long int v2 = 1;", veuillez écrire: "long int 1"
En cas d'erreur de compilation, écrire: `nocompile`

Subexo: 
~~~cpp
auto v1 = 1.5;        cout << v1 << endl;
~~~
Solution: 
double 1.5

Subexo: 
~~~cpp
auto v2 = 1E3;        cout << v2 << endl;
~~~
Solution: 
double 1E3

Subexo: 
~~~cpp
auto v4 = 12.0u;      cout << v4 << endl;
~~~
Solution: 
nocompile       
Explanation:
un réel ne peut être non signé

Subexo:
~~~cpp
auto v6 = 1.0L;       cout << v6 << endl;
~~~
Solution:
long double 1.0L

Subexo:
~~~cpp
auto v7 = .5;         cout << v7 << endl;
~~~
Solution:
double .5

Subexo:
~~~cpp
auto v8 = 5.;         cout << v8 << endl;
~~~
Solution:
double 5.

Subexo:
~~~cpp
auto v14 = 0x0.2;     cout << v14 << endl;
~~~
Solution:
nocompile
Explanation:
pas le bon format hexfloat

Subexo:
~~~cpp
auto v17 = 0x1.p0;    cout << v17 << endl;
~~~
Solution:
double 0x1.p0

Subexo:
~~~cpp
auto v18 = 0x1.8p+0f; cout << v18 << endl;
~~~
Solution: 
float 0x1.8p+0f

Subexo:
~~~cpp
auto v19 = 0x1.p-2L;  cout << v19 << endl;
~~~
Solution:
long double 0x1.p-2L

Subexo:
~~~cpp
auto v20 = 0x1.1p+2;  cout << v20 << endl; 
~~~
Solution:
double 0x1.1p+2
