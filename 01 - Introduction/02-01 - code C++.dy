Skill: Introduction
Exo: [single] [open] 1er code C++
TODO: est-ce okay ces remaniements de consignes et ajouts de questions plus précises ? (consigne parent, rajouts // 5 et // 1, questions enfants, ` au lieu de *).
TODO: okay le mode single ?

Dans le code ci-dessous:
~~~cpp
#include <iostream>                         // 1
#include <cstdlib>							// 1
using namespace std;                        // 2

int main()                                  // 3
{                                           // 4
    cout << "Hello world"       << endl;    // 5
    cout << "fin de programme"  << endl;	// 5
    return EXIT_SUCCESS;                    // 6
}                                           // 4
~~~
Subexo:
A quoi sert la partie `1` et pourquoi spécifiquement ces 2 éléments ?
Solution:
Ca sert à ajouter des librairies utiles au programme
- `iostream`  : pour `cout`, `cin`, ...
- `cstdlib`   : pour `EXIT_SUCCESS`

Subexo:
A quoi sert la partie `2` ?
Solution:
Utilise l'espace de nommage (namespace en anglais) `std`. Sans quoi, il faudrait écrire
- `std::cout`
- `std::endl`

Subexo:
A quoi sert la partie `3` ?
Solution:
`main` est le nom de la fonction principale (obligatoire)
- n'a pas de paramètre () /!\ `main(void)` serait faux (du C)
- retourne un code d'erreur en entier

TODO: "n'a pas de paramètre" vraiment correct ? si on prend argv et argc...
TODO: meilleure question possible ou faut-il reformuler la solution ?

Subexo:
Que définit la partie `4` (voir les 2 lignes)?
Solution: `{ ... }` bloc de la fonction contenant les instructions

Subexo:
Qu'écrit-on dans cette zone (partie `5`) de la fonction ? Que faut-il mettre en fin de ligne ?
Solution: Les instructions, toutes se terminent par un ";"
TODO: 2ème question ok ?

Subexo:
Que définit la partie `6` et que signifie `EXIT_SUCCESS` ?
Solution:
Code d'erreur en fin de fonction.
**NB**: pas obligatoire pour la fonction "main"

TODO: je propose de changer la solution en "Code de statut du programme, pour indiquer le type d'erreur ou le succès. `EXIT_SUCCESS` est une constante contenant `0` qui signifie que tout s'est bien déroulé dans notre programme. Ces codes de statuts sont généralement utilisés par d'autres programmes qui appellent notre exécutable et qui vont agir en fonction de la réussite ou non de son exécution."
